bacdata<-dataCV$resp.simple
bacdata[1]
bacdata<-as.numeric(dataCV$resp.simple)
bacdata[1]
bacdata<-as.numeric(dataCV$resp.simple)
for (i in 1: length (bacdata))
{
bacdata[i]<-c(bacdata[i]-1)
}
bacdata
as.numeric(dataCV$resp.simple)
dataCV$resp.simple
bac.RF<-score.bac(randFor.pr[,1],bacdata)
bac.RF
bac.ADA
source('score.bac.R')
bac.RF<-score.bac(randFor.pr[,1],bacdata)
bac.ADA<-score.bac(ada.pr[,1],bacdata)
bac.KSVM<-score.bac(ksvm.pr1[,1],bacdata)
bac.ADA
randFor.pr
randFor.prion
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
randFor.pr[,2]
bacdata
ada.pr[,2]
ksvm.pr1[,2]
randFor.pr<-predict(randFor,newdata=(dataCV),type='prob')
randFor.pr
ada.pr
type(randFor.pr)
str(randFor.pr)
str(ada.pr)
randFor.pr2<-asnumeric(randFor.pr)
randFor.pr2<-as.numeric(randFor.pr)
randFor.pr2
randFor.pr
randFor.pr2<-as.numeric(randFor.pr[,2])
randFor.pr2
ksvm.pr1[,2]
source('~/comparingmodsiters1021.R')
randFor.pr2
ada.pr[,2]
type(randFor.pr)
type(randFor.pr2)
str(randFor.pr2)
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
aucDataVec
aucDataVec[,1]<-as.numeric(as.character(aucDataVec[,1]))
aucDataVec<-data.frame(aucDataVec)
aucDataVec
write.table(aucDataVec, "c:/mydata.txt", sep="\t")
library(xlsx)
write.xlsx(aucDataVec, "c:/mydata.xlsx")
install.packages('xlk')
install.packages('xlxs')
install.packages('xlsx')
library(xlsx)
write.xlsx(aucDataVec, "c:/mydata.xlsx")
help(write.xlsx)
write.xlsx(aucDataVec, "c:/aucdata.xlsx")
write.xlsx(aucDataVec, "c:/MacintoshHD/Users/jenniferdawkins/Desktop/Research/aucdata.xlsx")
write.xlsx(aucDataVec, "file:///Users/MacintoshHD/Users/jenniferdawkins/Desktop/Research/aucdata.xlsx")
write.xlsx(aucDataVec, "file:///Users/jenniferdawkins/Desktop/Research/aucdata.xlsx")
write.xlsx(aucDataVec, "c:/Users/jenniferdawkins/Desktop/Research/aucdata.xlsx")
write.csv(aucDataVec, "c:/Users/jenniferdawkins/Desktop/Research/aucdata.xlsx")
write.csv(aucDataVec, "aucdata")
aucdatareal<-write.csv(aucDataVec, "aucdata")
aucdatreal
bacTrainingVecRF
randFor.pr[,2]
ada.pr[,2]
str(randFor.pr[,2])
str(ada.pr[,2])
randFor.pr<-predict(randFor,newdata=(dataCV),type='prob')
randFor.pr
randFor.pr[,2]
str(randFor.p)
str(randFor.pr)
str(ada.pr)
ada.pr
aucDataVec
colnames(aucDataVec)<-c('Value','Metric','Model')
aucDataVec
save(aucDataVec,file="auccrossval.Rdata")
load("~/auccrossval.Rdata")
auccrossva
auccrossval
auccrossval.Rdata
open('auccrossval.Rdata')
randFor.pr
str(randFor.pr)
str(ada.pr)
randFor.pr2<-data.frame(randFor.pr)
randFor.pr2
str(randFor.pr2)
str(randFor.pr2[,2])
str(ada.pr[,2])
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
randFor.pr[,2]
ada.pr[,2]
str(randFor.pr[,2])
str(ada.pr[,2])
bac.RF<-score.bac(randFor.pr[,2],bacdata)
bac.Rf
bac.RF
randFor.pr[,2]
bac.ADA
ada.r[,2]
ada.pr[,2]
randFor.pr
ada.pr
predictions.prob<-randFor.pr
key<-dataCV
predictions.prob.int<-predictions.prob
predictions.prob.int[which(predictions.prob>=.5)]<-1
predictions.prob.int[2]
predictions.prob.int
predictions.prob
a<-which(predictions.prob>=.5)
a
predictions.prob<-randFor.pr[,2]
predictions.prob
a<-which(predictions.prob>=.5)
a
ada.pr[,2]
b<-which(ada.pr[,2])>=.5
b<-which(ada.pr[,2]>=.5)
b
c<-which(predictions.prob<.5)
c
predictions.prob.int<-predictions.prob
predictions.prob.int
predictions.prob.int[which(predictions.prob>=.5)]<-1
predictions.prob.int
predictions.prob.int[which(predictions.prob<.5)]<-0
predictions.prob.int
for (i in 1:length(predictions.prob.int)){
if (predictions.prob.int[i]==1 & key[i]==1){ TP<-TP+1}
if (predictions.prob.int[i]==1 & key[i]==0){ FP<-FP+1}
if (predictions.prob.int[i]==0 & key[i]==0){ TN<-TN+1}
if (predictions.prob.int[i]==0 & key[i]==1){ FN<-FN+1}
}
key
key<-bacdata
for (i in 1:length(predictions.prob.int)){
if (predictions.prob.int[i]==1 & key[i]==1){ TP<-TP+1}
if (predictions.prob.int[i]==1 & key[i]==0){ FP<-FP+1}
if (predictions.prob.int[i]==0 & key[i]==0){ TN<-TN+1}
if (predictions.prob.int[i]==0 & key[i]==1){ FN<-FN+1}
}
if (predictions.prob.int[1]==1 & key[1]==1){TP<-TP+1}
TP
TP<-0
TN<-0
FP<-0
FN<-0
TP
TP<-0
TN<-0
FP<-0
FN<-0
i<-1
if (predictions.prob.int[i]==1 & key[i]==1){ TP<-TP+1}
if (predictions.prob.int[i]==1 & key[i]==0){ FP<-FP+1}
if (predictions.prob.int[i]==0 & key[i]==0){ TN<-TN+1}
if (predictions.prob.int[i]==0 & key[i]==1){ FN<-FN+1}
TP
TN
FP
FN
bacdata
predictions.prob.int
for (i in 1:length(predictions.prob.int)){
if (predictions.prob.int[i]==1 & key[i]==1){ TP<-TP+1}
if (predictions.prob.int[i]==1 & key[i]==0){ FP<-FP+1}
if (predictions.prob.int[i]==0 & key[i]==0){ TN<-TN+1}
if (predictions.prob.int[i]==0 & key[i]==1){ FN<-FN+1}
}
bac.RF<-score.bac(randFor.pr[,2],bacdata)
bac.RF
randFor.pr[,2]
str(KSVM.pr[,2])
str(ksvm.pr1[,2])
ksvm.pr1[,2]
TP
TP<-0
TN<-0
FP<-0
FN<-0
TP<-0
TN<-0
FP<-0
FN<-0
predictions.prob.int<-predictions.prob
predictions.prob.int[which(predictions.prob>=.5)]<-1
predictions.prob.int[which(predictions.prob<.5)]<-0
predictions.prob.int
key
if (predictions.prob.int[i]==1 & key[i]==1){ TP<-TP+1}
i
TN<-22
FN<-16
my.bac<-.5*(TP/(TP+FN))+.5*(TN/(TN+FP))
my.bac
TN
TP
help(randomForest)
??randomForest
m<-floor(sqrt(length(my.input)))
m
data1<-read.csv("file:///Users/jenniferdawkins/Downloads/trainingData-release-baseline-onlyQ1target.csv")
library(ggplot2)
library(randomForest)
library(ROCR)
library(rattle)
library(ada)
library(kernlab)
library(glmnet)
library(pROC)
s<-length(data1)
# ignore the first column of patient IDs
data<-data1[c(2:s)] # data is 191 patients
#data2<-data
#data2[data2=="ND"]<-"NA"
#data2[data2=="NotDone"]<-"NA"
## imputations: call imputation functions
source('impfunc.R')
data<-impfunc(data) # imputation
aucMedRFiter<-numeric()
aucMedADAiter<-numeric()
aucMedKSiter<-numeric()
aucMaxRFiter<-numeric()
aucMaxADAiter<-numeric()
aucMaxKSiter<-numeric()
aucMinRFiter<-numeric()
aucMinADAiter<-numeric()
aucMinKSiter<-numeric()
bacMedRFiter<-numeric()
bacMedADAiter<-numeric()
bacMedKSiter<-numeric()
bacMaxRFiter<-numeric()
bacMaxADAiter<-numeric()
bacMaxKSiter<-numeric()
bacMinRFiter<-numeric()
bacMinADAiter<-numeric()
bacMinKSiter<-numeric()
Model1vec<-numeric()
Model2vec<-numeric()
Model3vec<-numeric()
MinVec<-numeric()
MaxVec<-numeric()
MedVec<-numeric()
for (i in 1:10)
{
data1<-read.csv("file:///Users/jenniferdawkins/Downloads/trainingData-release-baseline-onlyQ1target.csv")
library(ggplot2)
library(randomForest)
library(ROCR)
library(rattle)
library(ada)
library(kernlab)
library(glmnet)
library(pROC)
s<-length(data1)
# ignore the first column of patient IDs
data<-data1[c(2:s)] # data is 191 patients
#data2<-data
#data2[data2=="ND"]<-"NA"
#data2[data2=="NotDone"]<-"NA"
## imputations: call imputation functions
source('impfunc.R')
data<-impfunc(data) # imputation
data.index<-sample(1:nrow(data),nrow(data),replace=FALSE)
data<-data[data.index,]
# define target variable
tarVar<-c("resp.simple")
q
)
data
length(data[1])
length(data[1,])
length(data[,1])
source('~/comparingmodsiters1021.R')
randFor.pr<-predict(randFor,newdata=(dataCV),type='prob')
str(randFor)
str(randFor.pr)
str(ada.pr)
randFor.pr<-data.frame(randFor.pr)
str(randFor.pr)
str(randFor.pr[,2])
str(ada.pr[,2])
randFor.pr[,2]
bacdata
length(bacdata)
as.numeric(dataCV$resp.simple)
score.bac(randFor.pr[,2],bacdata)
dataCV$resp.simple
randFor.pr
ada.pr
str(dataCV$resp.simple)
for (i in 1: length (bacdata))
{
if (bacdata[i]<-2){
bacdata[i]<-0
}
}
bacdata
bacdata<-as.numeric(dataCV$resp.simple)
for (i in 1: length (bacdata))
{
if (bacdata[i]==2){
bacdata[i]<-0
}
}
bacdata
m<-floor(sqrt(length(data[1,])))
m
length(dataTrain)
length(dataTRAIN)
size(dataTRAIN
)
nrow(dataTRAIN)
numCVdatVec
numTrainDat
numCVdatMat
set.seed(1)
for (i in 1:5)
{
numCVdat<-sample((setdiff(numTrainDat,numCVdatVec)),38)
numCVdatVec<-c(numCVdatVec,numCVdat)
numCVdatMat<-rbind(numCVdatMat,numCVdat)
}
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
totVec<-cbind(c(seq(1,10),seq(1,10),seq(1,10)),c(aucRFiterVec,aucADAiterVec,aucKSiterVec),Model)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
aucMinKSiter
bacMaxRFiter
bacMedRFiter
bacMinRFiter
2*.95
1.9+1.05
2.95/(2*1.05)
log(1.404762)
20*ans
20*0.3398679
log10(1.404762)
0.1476028*20
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
source('~/comparingmodsiters1021.R')
70/5
60/55
60/5
source('~/Desktop/R files/anova numeric data.R')
source('~/.active-rstudio-document')
install.packages('polycor')
./configure
setRepositories()
install.packages('polycor')
setRepositories()
ap<-available.packages()
ap["polycor","Depends"]
library(installr)
install.packages('insallr')
setRepositories()
setRepositories()
setRepositories
setRepositories()
library(installr)
clear
vocab = read.csv('/Users/jenniferdawkins/Downloads/hw4_vocab.txt')
voca
vocab
dist <- vegdist(varespec,  method = "bray")
library(vegan)
install.packages("vegan")
install.packages("ape")
install.packages("dplyr")
dist <- vegdist(varespec,  method = "bray")
# dist <- vegdist(varespec,  method = "bray")
dist <- as.dist(-abs(cor(DF, method="spearman")) + 1, diag=TRUE)
source('~/.active-rstudio-document')
install.packages("ggplot2")
source('~/.active-rstudio-document')
list.files()
path <- "~/Users/jendawk/Dropbox (MIT)/Microbiome/dada_analysis_june15" # CHANGE ME to the directory containing the fastq files after unzipping.
list.files(path)
list.files("~/Users/jendawk/Dropbox (MIT)/Microbiome")
list.files("~/Users/jendawk/Dropbox (MIT)/Microbiome/")
list.files("/Users/jendawk/Dropbox (MIT)/Microbiome/")
path <- "/Users/jendawk/Dropbox (MIT)/Microbiome/dada_analysis_june15" # CHANGE ME to the directory containing the fastq files after unzipping.
list.files(path)
source('~/Dropbox (MIT)/Microbiome/dada_analysis_june15/dada2.r')
errF <- learnErrors(filtFs, multithread=TRUE)
source('~/Dropbox (MIT)/Microbiome/dada_analysis_june15/dada2.r')
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:2])
fnFs
data <- read.csv('inputs/week_1_16s.csv', header = TRUE, row.names = 1)
data <- read.csv('inputs/week_1_16s.csv', header = TRUE, row.names = 1)
feature_mat = matrix(data[-length(data)])
View(feature_mat)
data <- read.csv('inputs/week_1_16s.csv', header = TRUE, row.names = 1)
feature_mat = matrix(data[-length(data)])
data <- read.csv('inputs/week_1_16s.csv', header = TRUE, row.names = 1)
feature_mat = data[-length(data)]
data <- read.csv('inputs/week_1_16s.csv', header = TRUE, row.names = 1)
features = colnames(data)[-length(data)]
perm <- adonis2(features ~ outcome, data = data, method = 'bray')
install.packages('vegan')
library(vegan)
data <- read.csv('inputs/week_1_16s.csv', header = TRUE, row.names = 1)
features = colnames(data)[-length(data)]
perm <- adonis2(features ~ outcome, data = data, method = 'bray')
View(data)
dist <- vegdist(data[features], method = 'bray')
perm <- adonis2(dist ~ outcome, data = data, method = 'bray')
library(vegan)
data <- read.csv('inputs/week_1_16s.csv', header = TRUE, row.names = 1)
features = colnames(data)[-length(data)]
data.mat = as.matrix(data[features])
dist <- vegdist(data.mat, method = 'bray')
perm <- adonis2(dist ~ outcome, data = data, method = 'bray')
library(vegan)
data <- read.csv('inputs/week_1_16s.csv', header = TRUE, row.names = 1)
features = colnames(data)[-length(data)]
data.mat = as.matrix(data[,features])
dist <- vegdist(data.mat, method = 'bray')
perm <- adonis2(dist ~ outcome, data = data, method = 'bray')
View(data.mat)
View(data)
data['outcome']
library(vegan)
data <- read.csv('inputs/week_1_16s.csv', header = TRUE, row.names = 1)
features = colnames(data)[-length(data)]
data.mat = as.matrix(data[,features])
dist <- vegdist(data.mat, method = 'bray')
perm <- adonis2(dist ~ outcome, data = data, method = 'bray')
perm
dist <- vegdist(data.mat, method = 'bray')
library(vegan)
data <- read.csv('inputs/week_1_16s.csv', header = TRUE, row.names = 1)
features = colnames(data)[-length(data)]
data.mat = as.matrix(data[,features])
dist <- vegdist(data.mat, method = 'bray')
dist <- vegdist(data.mat, method = 'bray')
dist
library(vegan)
data <- read.csv('inputs/counts_all_weeks.csv', header = TRUE, row.names = 1)
features = colnames(data)[-length(data)]
data.mat = as.matrix(data[,features])
library(vegan)
data <- read.csv('inputs/counts_all_weeks.csv', header = TRUE, row.names = 1)
features = colnames(data)[1:(length(data)-2)]
print(colnames(data)[len(data-1):len(data)])
library(vegan)
data <- read.csv('inputs/counts_all_weeks.csv', header = TRUE, row.names = 1)
features = colnames(data)[1:(length(data)-2)]
print(colnames(data)[length(data)-1:length(data)])
data.mat = as.matrix(data[,features])
print(colnames(data)[length(data)-1:length(data)])
data.mat = as.matrix(data[,features])
length(data)
length(data)-1
length(colnames(data
))
length(features)
length(colnames(data))
data.mat = as.matrix(data[,features])
dist <- vegdist(data.mat, method = 'bray')
perm <- adonis2(dist ~ outcome, data = data, method = 'bray')
View(perm)
perm <- adonis2(dist ~ outcome, data = data, method = 'bray')
perm_time <- adonis2(dist ~ week, data = data, method = 'bray')
View(perm_time)
View(perm_time)
View(perm_time)
install.packages("ape")
install.packages("dplyr")
install.packages("dplyr")
library(ape)
PCOA <- pcoa(dist)
biplot.pcoa(PCOA)
source('~/Dropbox (MIT)/C Diff Recurrence Paper/Analyses/scripts/DEseq2.R')
View(res)
View(x)
source('~/Dropbox (MIT)/C Diff Recurrence Paper/Analyses/scripts/DEseq2.R')
debugSource('~/Dropbox (MIT)/C Diff Recurrence Paper/Analyses/scripts/DEseq2.R')
source('~/Dropbox (MIT)/C Diff Recurrence Paper/Analyses/scripts/DEseq2.R')
source('~/Dropbox (MIT)/C Diff Recurrence Paper/Analyses/scripts/DEseq2.R')
source('~/Dropbox (MIT)/C Diff Recurrence Paper/Analyses/scripts/DEseq2.R')
source('~/Dropbox (MIT)/C Diff Recurrence Paper/Analyses/scripts/DEseq2.R')
source('~/Dropbox (MIT)/C Diff Recurrence Paper/Analyses/scripts/DEseq2.R')
